<snippet>
	<content><![CDATA[

struct Lift {
	int n;
	vector<array<int32_t, 20>> lift;
	vector<int32_t> dpth;
	Lift(const vector<vector<int>> &adj) {
		n = adj.size();
		lift.resize(n);
		dpth.resize(n);
		fill(all(dpth), 0);
		for (int i = 0 ; i < n ; i++)    lift[i].fill(-1);
		dfs(0, -1, adj);
		for (int j = 1 ; j < 20 ; j++) {
			for (int i = 0 ; i < n ; i++) {
				lift[i][j] = lift[i][j - 1];
				if (lift[i][j] != -1) lift[i][j] = lift[lift[i][j]][j - 1];
			}
		}
	}
	void dfs(int i, int p, const vector<vector<int>> &adj) {
		lift[i][0] = p;
		for (auto &u : adj[i]) {
			if (u == p)  continue;
			dpth[u] = dpth[i] + 1;
			dfs(u, i, adj);
		}
	}
	int kthanc(int node, int d) {
		for (int i = 0 ; i < 20 ; i++) {
			if (node != -1 && (d >> i) & 1) node = lift[node][i];
		}
		return node;
	}
	int lca(int x, int y) {
		if (dpth[x] > dpth[y])   swap(x, y);
		y = kthanc(y, dpth[y] - dpth[x]);
		if (x == y)  return x;
		for (int i = 19 ; i >= 0 ; i--) {
			if (lift[y][i] != lift[x][i])    x = lift[x][i], y = lift[y][i];
		}
		return lift[x][0];
	}
	int Distance(int node1, int node2) {
		int dis = dpth[node1] + dpth[node2] - 2 * dpth[lca(node1, node2)];
		return dis;
	}
};


]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>binary_lifting</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
